/*----- PROTECTED REGION ID(HdbEventSubscriberClass.cpp) ENABLED START -----*/
static const char *RcsId      = "$Id: HdbEventSubscriberClass.cpp,v 1.5 2014-03-07 14:05:54 graziano Exp $";
static const char *TagName    = "$Name:  $";
static const char *CvsPath    = "$Source: /home/cvsadm/cvsroot/fermi/servers/hdb++/hdb++es/src/HdbEventSubscriberClass.cpp,v $";
static const char *SvnPath    = "$HeadURL$";
static const char *HttpServer = "http://www.esrf.eu/computing/cs/tango/tango_doc/ds_doc/";
//=============================================================================
//
// file :        HdbEventSubscriberClass.cpp
//
// description : C++ source for the HdbEventSubscriberClass. A singleton
//               class derived from DeviceClass. It implements the
//               command list and all properties and methods required
//               by the �name� once per process.
//
// project :     Tango Device Server.
//
// $Author: graziano $
//
// $Revision: 1.5 $
// $Date: 2014-03-07 14:05:54 $
//
// SVN only:
// $HeadURL$
//
// CVS only:
// $Source: /home/cvsadm/cvsroot/fermi/servers/hdb++/hdb++es/src/HdbEventSubscriberClass.cpp,v $
// $Log: HdbEventSubscriberClass.cpp,v $
// Revision 1.5  2014-03-07 14:05:54  graziano
// added ResetStatistics command
//
// Revision 1.4  2014-02-20 15:15:11  graziano
// name and path fixing
// regenerated with new pogo
// added StartArchivingAtStartup property
//
// Revision 1.3  2013-08-23 10:04:53  graziano
// development
//
// Revision 1.2  2013-08-14 13:10:07  graziano
// development
//
// Revision 1.1  2013-07-17 13:37:43  graziano
// *** empty log message ***
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <HdbEventSubscriberClass.h>

/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriberClass.cpp

//-------------------------------------------------------------------
/**
 *	Create HdbEventSubscriberClass singleton and
 *	return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_HdbEventSubscriber_class(const char *name) {
		return HdbEventSubscriber_ns::HdbEventSubscriberClass::init(name);
	}
}

namespace HdbEventSubscriber_ns
{
//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
HdbEventSubscriberClass *HdbEventSubscriberClass::_instance = NULL;

//--------------------------------------------------------
/**
 * method : 		HdbEventSubscriberClass::HdbEventSubscriberClass(string &s)
 * description : 	constructor for the HdbEventSubscriberClass
 *
 * @param s	The class name
 */
//--------------------------------------------------------
HdbEventSubscriberClass::HdbEventSubscriberClass(string &s):Tango::DeviceClass(s)
{
	cout2 << "Entering HdbEventSubscriberClass constructor" << endl;
	set_default_property();
	get_class_property();
	write_class_property();

	/*----- PROTECTED REGION ID(HdbEventSubscriberClass::constructor) ENABLED START -----*/
	

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriberClass::constructor

	cout2 << "Leaving HdbEventSubscriberClass constructor" << endl;
}

//--------------------------------------------------------
/**
 * method : 		HdbEventSubscriberClass::~HdbEventSubscriberClass()
 * description : 	destructor for the HdbEventSubscriberClass
 */
//--------------------------------------------------------
HdbEventSubscriberClass::~HdbEventSubscriberClass()
{
	/*----- PROTECTED REGION ID(HdbEventSubscriberClass::destructor) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriberClass::destructor

	_instance = NULL;
}


//--------------------------------------------------------
/**
 * method : 		HdbEventSubscriberClass::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
//--------------------------------------------------------
HdbEventSubscriberClass *HdbEventSubscriberClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new HdbEventSubscriberClass(s);
		}
		catch (bad_alloc &)
		{
			throw;
		}		
	}		
	return _instance;
}

//--------------------------------------------------------
/**
 * method : 		HdbEventSubscriberClass::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
HdbEventSubscriberClass *HdbEventSubscriberClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}



//===================================================================
//	Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method : 		AttributeAddClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *AttributeAddClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "AttributeAddClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<HdbEventSubscriber *>(device))->attribute_add(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		AttributeRemoveClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *AttributeRemoveClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "AttributeRemoveClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<HdbEventSubscriber *>(device))->attribute_remove(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		AttributeStatusClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *AttributeStatusClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "AttributeStatusClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	return insert((static_cast<HdbEventSubscriber *>(device))->attribute_status(argin));
}

//--------------------------------------------------------
/**
 * method : 		StartClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *StartClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "StartClass::execute(): arrived" << endl;
	((static_cast<HdbEventSubscriber *>(device))->start());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		StopClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *StopClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "StopClass::execute(): arrived" << endl;
	((static_cast<HdbEventSubscriber *>(device))->stop());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		AttributeStartClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *AttributeStartClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "AttributeStartClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<HdbEventSubscriber *>(device))->attribute_start(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		AttributeStopClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *AttributeStopClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "AttributeStopClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<HdbEventSubscriber *>(device))->attribute_stop(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ResetStatisticsClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ResetStatisticsClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ResetStatisticsClass::execute(): arrived" << endl;
	((static_cast<HdbEventSubscriber *>(device))->reset_statistics());
	return new CORBA::Any();
}


//===================================================================
//	Properties management
//===================================================================
//--------------------------------------------------------
/**
 *	Method      : HdbEventSubscriberClass::get_class_property()
 *	Description : Get the class property for specified name.
 */
//--------------------------------------------------------
Tango::DbDatum HdbEventSubscriberClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : HdbEventSubscriberClass::get_default_device_property()
 *	Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum HdbEventSubscriberClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : HdbEventSubscriberClass::get_default_class_property()
 *	Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum HdbEventSubscriberClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : HdbEventSubscriberClass::get_class_property()
 *	Description : Read database to initialize class property data members.
 */
//--------------------------------------------------------
void HdbEventSubscriberClass::get_class_property()
{
	/*----- PROTECTED REGION ID(HdbEventSubscriberClass::get_class_property_before) ENABLED START -----*/

	//	Initialize class property data members

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriberClass::get_class_property_before
	//	Read class properties from database.
	cl_prop.push_back(Tango::DbDatum("SubscribeRetryPeriod"));
	cl_prop.push_back(Tango::DbDatum("DbHost"));
	cl_prop.push_back(Tango::DbDatum("DbUser"));
	cl_prop.push_back(Tango::DbDatum("DbPassword"));
	cl_prop.push_back(Tango::DbDatum("DbName"));
	cl_prop.push_back(Tango::DbDatum("DbPort"));
	cl_prop.push_back(Tango::DbDatum("StartArchivingAtStartup"));
	cl_prop.push_back(Tango::DbDatum("StatisticsTimeWindow"));
	cl_prop.push_back(Tango::DbDatum("CheckPeriodicTimeoutDelay"));
	cl_prop.push_back(Tango::DbDatum("PollingThreadPeriod"));
	
	//	Call database and extract values
	if (Tango::Util::instance()->_UseDb==true)
		get_db_class()->get_property(cl_prop);
	Tango::DbDatum	def_prop;
	int	i = -1;

	//	Try to extract SubscribeRetryPeriod value
	if (cl_prop[++i].is_empty()==false)	cl_prop[i]  >>  subscribeRetryPeriod;
	else
	{
		//	Check default value for SubscribeRetryPeriod
		def_prop = get_default_class_property(cl_prop[i].name);
		if (def_prop.is_empty()==false)
		{
			def_prop    >>  subscribeRetryPeriod;
			cl_prop[i]  <<  subscribeRetryPeriod;
		}
	}
	//	Try to extract DbHost value
	if (cl_prop[++i].is_empty()==false)	cl_prop[i]  >>  dbHost;
	else
	{
		//	Check default value for DbHost
		def_prop = get_default_class_property(cl_prop[i].name);
		if (def_prop.is_empty()==false)
		{
			def_prop    >>  dbHost;
			cl_prop[i]  <<  dbHost;
		}
	}
	//	Try to extract DbUser value
	if (cl_prop[++i].is_empty()==false)	cl_prop[i]  >>  dbUser;
	else
	{
		//	Check default value for DbUser
		def_prop = get_default_class_property(cl_prop[i].name);
		if (def_prop.is_empty()==false)
		{
			def_prop    >>  dbUser;
			cl_prop[i]  <<  dbUser;
		}
	}
	//	Try to extract DbPassword value
	if (cl_prop[++i].is_empty()==false)	cl_prop[i]  >>  dbPassword;
	else
	{
		//	Check default value for DbPassword
		def_prop = get_default_class_property(cl_prop[i].name);
		if (def_prop.is_empty()==false)
		{
			def_prop    >>  dbPassword;
			cl_prop[i]  <<  dbPassword;
		}
	}
	//	Try to extract DbName value
	if (cl_prop[++i].is_empty()==false)	cl_prop[i]  >>  dbName;
	else
	{
		//	Check default value for DbName
		def_prop = get_default_class_property(cl_prop[i].name);
		if (def_prop.is_empty()==false)
		{
			def_prop    >>  dbName;
			cl_prop[i]  <<  dbName;
		}
	}
	//	Try to extract DbPort value
	if (cl_prop[++i].is_empty()==false)	cl_prop[i]  >>  dbPort;
	else
	{
		//	Check default value for DbPort
		def_prop = get_default_class_property(cl_prop[i].name);
		if (def_prop.is_empty()==false)
		{
			def_prop    >>  dbPort;
			cl_prop[i]  <<  dbPort;
		}
	}
	//	Try to extract StartArchivingAtStartup value
	if (cl_prop[++i].is_empty()==false)	cl_prop[i]  >>  startArchivingAtStartup;
	else
	{
		//	Check default value for StartArchivingAtStartup
		def_prop = get_default_class_property(cl_prop[i].name);
		if (def_prop.is_empty()==false)
		{
			def_prop    >>  startArchivingAtStartup;
			cl_prop[i]  <<  startArchivingAtStartup;
		}
	}
	//	Try to extract StatisticsTimeWindow value
	if (cl_prop[++i].is_empty()==false)	cl_prop[i]  >>  statisticsTimeWindow;
	else
	{
		//	Check default value for StatisticsTimeWindow
		def_prop = get_default_class_property(cl_prop[i].name);
		if (def_prop.is_empty()==false)
		{
			def_prop    >>  statisticsTimeWindow;
			cl_prop[i]  <<  statisticsTimeWindow;
		}
	}
	//	Try to extract CheckPeriodicTimeoutDelay value
	if (cl_prop[++i].is_empty()==false)	cl_prop[i]  >>  checkPeriodicTimeoutDelay;
	else
	{
		//	Check default value for CheckPeriodicTimeoutDelay
		def_prop = get_default_class_property(cl_prop[i].name);
		if (def_prop.is_empty()==false)
		{
			def_prop    >>  checkPeriodicTimeoutDelay;
			cl_prop[i]  <<  checkPeriodicTimeoutDelay;
		}
	}
	//	Try to extract PollingThreadPeriod value
	if (cl_prop[++i].is_empty()==false)	cl_prop[i]  >>  pollingThreadPeriod;
	else
	{
		//	Check default value for PollingThreadPeriod
		def_prop = get_default_class_property(cl_prop[i].name);
		if (def_prop.is_empty()==false)
		{
			def_prop    >>  pollingThreadPeriod;
			cl_prop[i]  <<  pollingThreadPeriod;
		}
	}
	/*----- PROTECTED REGION ID(HdbEventSubscriberClass::get_class_property_after) ENABLED START -----*/

	//	Check class property data members init

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriberClass::get_class_property_after

}

//--------------------------------------------------------
/**
 *	Method      : HdbEventSubscriberClass::set_default_property()
 *	Description : Set default property (class and device) for wizard.
 *                For each property, add to wizard property name and description.
 *                If default value has been set, add it to wizard property and
 *                store it in a DbDatum.
 */
//--------------------------------------------------------
void HdbEventSubscriberClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;
	vector<string>	vect_data;

	//	Set Default Class Properties
	prop_name = "SubscribeRetryPeriod";
	prop_desc = "Subscribe event retrying period in seconds.";
	prop_def  = "60";
	vect_data.clear();
	vect_data.push_back("60");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		cl_def_prop.push_back(data);
		add_wiz_class_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_class_prop(prop_name, prop_desc);
	prop_name = "DbHost";
	prop_desc = "";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		cl_def_prop.push_back(data);
		add_wiz_class_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_class_prop(prop_name, prop_desc);
	prop_name = "DbUser";
	prop_desc = "";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		cl_def_prop.push_back(data);
		add_wiz_class_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_class_prop(prop_name, prop_desc);
	prop_name = "DbPassword";
	prop_desc = "";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		cl_def_prop.push_back(data);
		add_wiz_class_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_class_prop(prop_name, prop_desc);
	prop_name = "DbName";
	prop_desc = "";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		cl_def_prop.push_back(data);
		add_wiz_class_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_class_prop(prop_name, prop_desc);
	prop_name = "DbPort";
	prop_desc = "";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		cl_def_prop.push_back(data);
		add_wiz_class_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_class_prop(prop_name, prop_desc);
	prop_name = "StartArchivingAtStartup";
	prop_desc = "Start archiving at startup";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		cl_def_prop.push_back(data);
		add_wiz_class_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_class_prop(prop_name, prop_desc);
	prop_name = "StatisticsTimeWindow";
	prop_desc = "Statistics time window in seconds";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		cl_def_prop.push_back(data);
		add_wiz_class_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_class_prop(prop_name, prop_desc);
	prop_name = "CheckPeriodicTimeoutDelay";
	prop_desc = "Delay in seconds before timeout when checking periodic events";
	prop_def  = "5";
	vect_data.clear();
	vect_data.push_back("5");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		cl_def_prop.push_back(data);
		add_wiz_class_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_class_prop(prop_name, prop_desc);
	prop_name = "PollingThreadPeriod";
	prop_desc = "Polling thread period in seconds.";
	prop_def  = "3";
	vect_data.clear();
	vect_data.push_back("3");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		cl_def_prop.push_back(data);
		add_wiz_class_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_class_prop(prop_name, prop_desc);

	//	Set Default device Properties
	prop_name = "SubscribeRetryPeriod";
	prop_desc = "Subscribe event retrying period in seconds.";
	prop_def  = "60";
	vect_data.clear();
	vect_data.push_back("60");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "AttributeList";
	prop_desc = "List of configured attributes.";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "DbHost";
	prop_desc = "";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "DbUser";
	prop_desc = "";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "DbPassword";
	prop_desc = "";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "DbName";
	prop_desc = "";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "DbPort";
	prop_desc = "";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "StartArchivingAtStartup";
	prop_desc = "Start archiving at startup";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "StatisticsTimeWindow";
	prop_desc = "Statistics time window in seconds";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "CheckPeriodicTimeoutDelay";
	prop_desc = "Delay in seconds before timeout when checking periodic events";
	prop_def  = "5";
	vect_data.clear();
	vect_data.push_back("5");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "PollingThreadPeriod";
	prop_desc = "Polling Thread period in seconds.";
	prop_def  = "3";
	vect_data.clear();
	vect_data.push_back("3");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
}

//--------------------------------------------------------
/**
 *	Method      : HdbEventSubscriberClass::write_class_property()
 *	Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void HdbEventSubscriberClass::write_class_property()
{
	//	First time, check if database used
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("Tango Device Server");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("This class is able to subscribe on archive events and store value in Historical DB");
	description << str_desc;
	data.push_back(description);

	//	put cvs or svn location
	string	filename("HdbEventSubscriber");
	filename += "Class.cpp";

	// check for cvs information
	string	src_path(CvsPath);
	start = src_path.find("/");
	if (start!=string::npos)
	{
		end   = src_path.find(filename);
		if (end>start)
		{
			string	strloc = src_path.substr(start, end-start);
			//	Check if specific repository
			start = strloc.find("/cvsroot/");
			if (start!=string::npos && start>0)
			{
				string	repository = strloc.substr(0, start);
				if (repository.find("/segfs/")!=string::npos)
					strloc = "ESRF:" + strloc.substr(start, strloc.length()-start);
			}
			Tango::DbDatum	cvs_loc("cvs_location");
			cvs_loc << strloc;
			data.push_back(cvs_loc);
		}
	}

	// check for svn information
	else
	{
		string	src_path(SvnPath);
		start = src_path.find("://");
		if (start!=string::npos)
		{
			end = src_path.find(filename);
			if (end>start)
			{
				header = "$HeadURL: ";
				start = header.length();
				string	strloc = src_path.substr(start, (end-start));
				
				Tango::DbDatum	svn_loc("svn_location");
				svn_loc << strloc;
				data.push_back(svn_loc);
			}
		}
	}

	//	Get CVS or SVN revision tag
	
	// CVS tag
	string	tagname(TagName);
	header = "$Name: ";
	start = header.length();
	string	endstr(" $");
	
	end   = tagname.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strtag = tagname.substr(start, end-start);
		Tango::DbDatum	cvs_tag("cvs_tag");
		cvs_tag << strtag;
		data.push_back(cvs_tag);
	}
	
	// SVN tag
	string	svnpath(SvnPath);
	header = "$HeadURL: ";
	start = header.length();
	
	end   = svnpath.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strloc = svnpath.substr(start, end-start);
		
		string tagstr ("/tags/");
		start = strloc.find(tagstr);
		if ( start!=string::npos )
		{
			start = start + tagstr.length();
			end   = strloc.find(filename);
			string	strtag = strloc.substr(start, end-start-1);
			
			Tango::DbDatum	svn_tag("svn_tag");
			svn_tag << strtag;
			data.push_back(svn_tag);
		}
	}

	//	Get URL location
	string	httpServ(HttpServer);
	if (httpServ.length()>0)
	{
		Tango::DbDatum	db_doc_url("doc_url");
		db_doc_url << httpServ;
		data.push_back(db_doc_url);
	}

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("TANGO_BASE_CLASS");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	get_db_class()->put_property(data);
}

//===================================================================
//	Factory methods
//===================================================================

//--------------------------------------------------------
/**
 *	Method      : HdbEventSubscriberClass::device_factory()
 *	Description : Create the device object(s)
 *                and store them in the device list
 */
//--------------------------------------------------------
void HdbEventSubscriberClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	/*----- PROTECTED REGION ID(HdbEventSubscriberClass::device_factory_before) ENABLED START -----*/

	//	Add your own code
	

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriberClass::device_factory_before

	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
		device_list.push_back(new HdbEventSubscriber(this, (*devlist_ptr)[i]));							 
	}

	//	Manage dynamic attributes if any
	erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		HdbEventSubscriber *dev = static_cast<HdbEventSubscriber *>(device_list[device_list.size()-i]);
		dev->add_dynamic_attributes();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	/*----- PROTECTED REGION ID(HdbEventSubscriberClass::device_factory_after) ENABLED START -----*/

	//	Add your own code
	

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriberClass::device_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : HdbEventSubscriberClass::attribute_factory()
 *	Description : Create the attribute object(s)
 *                and store them in the attribute list
 */
//--------------------------------------------------------
void HdbEventSubscriberClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(HdbEventSubscriberClass::attribute_factory_before) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriberClass::attribute_factory_before
	//	Attribute : AttributeOkNumber
	AttributeOkNumberAttrib	*attributeoknumber = new AttributeOkNumberAttrib();
	Tango::UserDefaultAttrProp	attributeoknumber_prop;
	attributeoknumber_prop.set_description("Number of archived attributes not in error");
	//	label	not set for AttributeOkNumber
	//	unit	not set for AttributeOkNumber
	//	standard_unit	not set for AttributeOkNumber
	//	display_unit	not set for AttributeOkNumber
	//	format	not set for AttributeOkNumber
	//	max_value	not set for AttributeOkNumber
	//	min_value	not set for AttributeOkNumber
	//	max_alarm	not set for AttributeOkNumber
	//	min_alarm	not set for AttributeOkNumber
	//	max_warning	not set for AttributeOkNumber
	//	min_warning	not set for AttributeOkNumber
	//	delta_t	not set for AttributeOkNumber
	//	delta_val	not set for AttributeOkNumber
	attributeoknumber_prop.set_event_abs_change("1");
	attributeoknumber_prop.set_archive_event_abs_change("1");
	
	attributeoknumber->set_default_properties(attributeoknumber_prop);
	//	Not Polled
	attributeoknumber->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	attributeoknumber->set_change_event(true, true);
	attributeoknumber->set_archive_event(true, true);
	att_list.push_back(attributeoknumber);

	//	Attribute : AttributeNokNumber
	AttributeNokNumberAttrib	*attributenoknumber = new AttributeNokNumberAttrib();
	Tango::UserDefaultAttrProp	attributenoknumber_prop;
	attributenoknumber_prop.set_description("Number of archived attributes in error");
	//	label	not set for AttributeNokNumber
	//	unit	not set for AttributeNokNumber
	//	standard_unit	not set for AttributeNokNumber
	//	display_unit	not set for AttributeNokNumber
	//	format	not set for AttributeNokNumber
	//	max_value	not set for AttributeNokNumber
	//	min_value	not set for AttributeNokNumber
	attributenoknumber_prop.set_max_alarm("1");
	//	min_alarm	not set for AttributeNokNumber
	//	max_warning	not set for AttributeNokNumber
	//	min_warning	not set for AttributeNokNumber
	//	delta_t	not set for AttributeNokNumber
	//	delta_val	not set for AttributeNokNumber
	attributenoknumber_prop.set_event_abs_change("1");
	attributenoknumber_prop.set_archive_event_abs_change("1");
	
	attributenoknumber->set_default_properties(attributenoknumber_prop);
	//	Not Polled
	attributenoknumber->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	attributenoknumber->set_change_event(true, true);
	attributenoknumber->set_archive_event(true, true);
	att_list.push_back(attributenoknumber);

	//	Attribute : AttributePendingNumber
	AttributePendingNumberAttrib	*attributependingnumber = new AttributePendingNumberAttrib();
	Tango::UserDefaultAttrProp	attributependingnumber_prop;
	attributependingnumber_prop.set_description("Number of attributes waiting to be archived");
	//	label	not set for AttributePendingNumber
	//	unit	not set for AttributePendingNumber
	//	standard_unit	not set for AttributePendingNumber
	//	display_unit	not set for AttributePendingNumber
	//	format	not set for AttributePendingNumber
	//	max_value	not set for AttributePendingNumber
	//	min_value	not set for AttributePendingNumber
	//	max_alarm	not set for AttributePendingNumber
	//	min_alarm	not set for AttributePendingNumber
	//	max_warning	not set for AttributePendingNumber
	//	min_warning	not set for AttributePendingNumber
	//	delta_t	not set for AttributePendingNumber
	//	delta_val	not set for AttributePendingNumber
	attributependingnumber_prop.set_event_abs_change("2");
	attributependingnumber_prop.set_archive_event_abs_change("2");
	
	attributependingnumber->set_default_properties(attributependingnumber_prop);
	//	Not Polled
	attributependingnumber->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	attributependingnumber->set_change_event(true, true);
	attributependingnumber->set_archive_event(true, true);
	att_list.push_back(attributependingnumber);

	//	Attribute : AttributeNumber
	AttributeNumberAttrib	*attributenumber = new AttributeNumberAttrib();
	Tango::UserDefaultAttrProp	attributenumber_prop;
	attributenumber_prop.set_description("Number of configured attributes");
	//	label	not set for AttributeNumber
	//	unit	not set for AttributeNumber
	//	standard_unit	not set for AttributeNumber
	//	display_unit	not set for AttributeNumber
	//	format	not set for AttributeNumber
	//	max_value	not set for AttributeNumber
	//	min_value	not set for AttributeNumber
	//	max_alarm	not set for AttributeNumber
	//	min_alarm	not set for AttributeNumber
	//	max_warning	not set for AttributeNumber
	//	min_warning	not set for AttributeNumber
	//	delta_t	not set for AttributeNumber
	//	delta_val	not set for AttributeNumber
	attributenumber_prop.set_event_abs_change("1");
	attributenumber_prop.set_archive_event_abs_change("1");
	
	attributenumber->set_default_properties(attributenumber_prop);
	//	Not Polled
	attributenumber->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	attributenumber->set_change_event(true, true);
	attributenumber->set_archive_event(true, true);
	att_list.push_back(attributenumber);

	//	Attribute : AttributeMaxStoreTime
	AttributeMaxStoreTimeAttrib	*attributemaxstoretime = new AttributeMaxStoreTimeAttrib();
	Tango::UserDefaultAttrProp	attributemaxstoretime_prop;
	attributemaxstoretime_prop.set_description("Maximum storing time");
	//	label	not set for AttributeMaxStoreTime
	attributemaxstoretime_prop.set_unit("s");
	attributemaxstoretime_prop.set_standard_unit("1");
	attributemaxstoretime_prop.set_display_unit("s");
	//	format	not set for AttributeMaxStoreTime
	//	max_value	not set for AttributeMaxStoreTime
	//	min_value	not set for AttributeMaxStoreTime
	//	max_alarm	not set for AttributeMaxStoreTime
	//	min_alarm	not set for AttributeMaxStoreTime
	//	max_warning	not set for AttributeMaxStoreTime
	//	min_warning	not set for AttributeMaxStoreTime
	//	delta_t	not set for AttributeMaxStoreTime
	//	delta_val	not set for AttributeMaxStoreTime
	
	attributemaxstoretime->set_default_properties(attributemaxstoretime_prop);
	//	Not Polled
	attributemaxstoretime->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(attributemaxstoretime);

	//	Attribute : AttributeMinStoreTime
	AttributeMinStoreTimeAttrib	*attributeminstoretime = new AttributeMinStoreTimeAttrib();
	Tango::UserDefaultAttrProp	attributeminstoretime_prop;
	attributeminstoretime_prop.set_description("Minimum storing time");
	//	label	not set for AttributeMinStoreTime
	attributeminstoretime_prop.set_unit("s");
	attributeminstoretime_prop.set_standard_unit("1");
	attributeminstoretime_prop.set_display_unit("s");
	//	format	not set for AttributeMinStoreTime
	//	max_value	not set for AttributeMinStoreTime
	//	min_value	not set for AttributeMinStoreTime
	//	max_alarm	not set for AttributeMinStoreTime
	//	min_alarm	not set for AttributeMinStoreTime
	//	max_warning	not set for AttributeMinStoreTime
	//	min_warning	not set for AttributeMinStoreTime
	//	delta_t	not set for AttributeMinStoreTime
	//	delta_val	not set for AttributeMinStoreTime
	
	attributeminstoretime->set_default_properties(attributeminstoretime_prop);
	//	Not Polled
	attributeminstoretime->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(attributeminstoretime);

	//	Attribute : AttributeMaxProcessingTime
	AttributeMaxProcessingTimeAttrib	*attributemaxprocessingtime = new AttributeMaxProcessingTimeAttrib();
	Tango::UserDefaultAttrProp	attributemaxprocessingtime_prop;
	attributemaxprocessingtime_prop.set_description("Maximum processing (from event reception to storage) time");
	//	label	not set for AttributeMaxProcessingTime
	attributemaxprocessingtime_prop.set_unit("s");
	attributemaxprocessingtime_prop.set_standard_unit("1");
	attributemaxprocessingtime_prop.set_display_unit("s");
	//	format	not set for AttributeMaxProcessingTime
	//	max_value	not set for AttributeMaxProcessingTime
	//	min_value	not set for AttributeMaxProcessingTime
	//	max_alarm	not set for AttributeMaxProcessingTime
	//	min_alarm	not set for AttributeMaxProcessingTime
	//	max_warning	not set for AttributeMaxProcessingTime
	//	min_warning	not set for AttributeMaxProcessingTime
	//	delta_t	not set for AttributeMaxProcessingTime
	//	delta_val	not set for AttributeMaxProcessingTime
	
	attributemaxprocessingtime->set_default_properties(attributemaxprocessingtime_prop);
	//	Not Polled
	attributemaxprocessingtime->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(attributemaxprocessingtime);

	//	Attribute : AttributeMinProcessingTime
	AttributeMinProcessingTimeAttrib	*attributeminprocessingtime = new AttributeMinProcessingTimeAttrib();
	Tango::UserDefaultAttrProp	attributeminprocessingtime_prop;
	attributeminprocessingtime_prop.set_description("Minimum processing (from event reception to storage) time");
	//	label	not set for AttributeMinProcessingTime
	attributeminprocessingtime_prop.set_unit("s");
	attributeminprocessingtime_prop.set_standard_unit("1");
	attributeminprocessingtime_prop.set_display_unit("s");
	//	format	not set for AttributeMinProcessingTime
	//	max_value	not set for AttributeMinProcessingTime
	//	min_value	not set for AttributeMinProcessingTime
	//	max_alarm	not set for AttributeMinProcessingTime
	//	min_alarm	not set for AttributeMinProcessingTime
	//	max_warning	not set for AttributeMinProcessingTime
	//	min_warning	not set for AttributeMinProcessingTime
	//	delta_t	not set for AttributeMinProcessingTime
	//	delta_val	not set for AttributeMinProcessingTime
	
	attributeminprocessingtime->set_default_properties(attributeminprocessingtime_prop);
	//	Not Polled
	attributeminprocessingtime->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(attributeminprocessingtime);

	//	Attribute : AttributeRecordFreq
	AttributeRecordFreqAttrib	*attributerecordfreq = new AttributeRecordFreqAttrib();
	Tango::UserDefaultAttrProp	attributerecordfreq_prop;
	attributerecordfreq_prop.set_description("Record frequency");
	//	label	not set for AttributeRecordFreq
	attributerecordfreq_prop.set_unit("ev/period");
	attributerecordfreq_prop.set_standard_unit("1");
	attributerecordfreq_prop.set_display_unit("ev/period");
	//	format	not set for AttributeRecordFreq
	//	max_value	not set for AttributeRecordFreq
	//	min_value	not set for AttributeRecordFreq
	//	max_alarm	not set for AttributeRecordFreq
	//	min_alarm	not set for AttributeRecordFreq
	//	max_warning	not set for AttributeRecordFreq
	//	min_warning	not set for AttributeRecordFreq
	//	delta_t	not set for AttributeRecordFreq
	//	delta_val	not set for AttributeRecordFreq
	attributerecordfreq_prop.set_event_abs_change("5");
	attributerecordfreq_prop.set_archive_event_abs_change("5");
	
	attributerecordfreq->set_default_properties(attributerecordfreq_prop);
	//	Not Polled
	attributerecordfreq->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	attributerecordfreq->set_change_event(true, true);
	attributerecordfreq->set_archive_event(true, true);
	att_list.push_back(attributerecordfreq);

	//	Attribute : AttributeFailureFreq
	AttributeFailureFreqAttrib	*attributefailurefreq = new AttributeFailureFreqAttrib();
	Tango::UserDefaultAttrProp	attributefailurefreq_prop;
	attributefailurefreq_prop.set_description("Failure frequency");
	//	label	not set for AttributeFailureFreq
	attributefailurefreq_prop.set_unit("ev/period");
	attributefailurefreq_prop.set_standard_unit("1");
	attributefailurefreq_prop.set_display_unit("ev/period");
	//	format	not set for AttributeFailureFreq
	//	max_value	not set for AttributeFailureFreq
	//	min_value	not set for AttributeFailureFreq
	//	max_alarm	not set for AttributeFailureFreq
	//	min_alarm	not set for AttributeFailureFreq
	//	max_warning	not set for AttributeFailureFreq
	//	min_warning	not set for AttributeFailureFreq
	//	delta_t	not set for AttributeFailureFreq
	//	delta_val	not set for AttributeFailureFreq
	attributefailurefreq_prop.set_event_abs_change("5");
	attributefailurefreq_prop.set_archive_event_abs_change("5");
	
	attributefailurefreq->set_default_properties(attributefailurefreq_prop);
	//	Not Polled
	attributefailurefreq->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	attributefailurefreq->set_change_event(true, true);
	attributefailurefreq->set_archive_event(true, true);
	att_list.push_back(attributefailurefreq);

	//	Attribute : AttributeStartedNumber
	AttributeStartedNumberAttrib	*attributestartednumber = new AttributeStartedNumberAttrib();
	Tango::UserDefaultAttrProp	attributestartednumber_prop;
	attributestartednumber_prop.set_description("Number of archived attributes started");
	//	label	not set for AttributeStartedNumber
	//	unit	not set for AttributeStartedNumber
	//	standard_unit	not set for AttributeStartedNumber
	//	display_unit	not set for AttributeStartedNumber
	//	format	not set for AttributeStartedNumber
	//	max_value	not set for AttributeStartedNumber
	//	min_value	not set for AttributeStartedNumber
	//	max_alarm	not set for AttributeStartedNumber
	//	min_alarm	not set for AttributeStartedNumber
	//	max_warning	not set for AttributeStartedNumber
	//	min_warning	not set for AttributeStartedNumber
	//	delta_t	not set for AttributeStartedNumber
	//	delta_val	not set for AttributeStartedNumber
	attributestartednumber_prop.set_event_abs_change("1");
	attributestartednumber_prop.set_archive_event_abs_change("1");
	
	attributestartednumber->set_default_properties(attributestartednumber_prop);
	//	Not Polled
	attributestartednumber->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	attributestartednumber->set_change_event(true, true);
	attributestartednumber->set_archive_event(true, true);
	att_list.push_back(attributestartednumber);

	//	Attribute : AttributeStoppedNumber
	AttributeStoppedNumberAttrib	*attributestoppednumber = new AttributeStoppedNumberAttrib();
	Tango::UserDefaultAttrProp	attributestoppednumber_prop;
	attributestoppednumber_prop.set_description("Number of archived attributes stopped");
	//	label	not set for AttributeStoppedNumber
	//	unit	not set for AttributeStoppedNumber
	//	standard_unit	not set for AttributeStoppedNumber
	//	display_unit	not set for AttributeStoppedNumber
	//	format	not set for AttributeStoppedNumber
	//	max_value	not set for AttributeStoppedNumber
	//	min_value	not set for AttributeStoppedNumber
	//	max_alarm	not set for AttributeStoppedNumber
	//	min_alarm	not set for AttributeStoppedNumber
	//	max_warning	not set for AttributeStoppedNumber
	//	min_warning	not set for AttributeStoppedNumber
	//	delta_t	not set for AttributeStoppedNumber
	//	delta_val	not set for AttributeStoppedNumber
	attributestoppednumber_prop.set_event_abs_change("1");
	attributestoppednumber_prop.set_archive_event_abs_change("1");
	
	attributestoppednumber->set_default_properties(attributestoppednumber_prop);
	//	Not Polled
	attributestoppednumber->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	attributestoppednumber->set_change_event(true, true);
	attributestoppednumber->set_archive_event(true, true);
	att_list.push_back(attributestoppednumber);

	//	Attribute : AttributeMaxPendingNumber
	AttributeMaxPendingNumberAttrib	*attributemaxpendingnumber = new AttributeMaxPendingNumberAttrib();
	Tango::UserDefaultAttrProp	attributemaxpendingnumber_prop;
	attributemaxpendingnumber_prop.set_description("Max number of attributes waiting to be archived");
	//	label	not set for AttributeMaxPendingNumber
	//	unit	not set for AttributeMaxPendingNumber
	//	standard_unit	not set for AttributeMaxPendingNumber
	//	display_unit	not set for AttributeMaxPendingNumber
	//	format	not set for AttributeMaxPendingNumber
	//	max_value	not set for AttributeMaxPendingNumber
	//	min_value	not set for AttributeMaxPendingNumber
	//	max_alarm	not set for AttributeMaxPendingNumber
	//	min_alarm	not set for AttributeMaxPendingNumber
	//	max_warning	not set for AttributeMaxPendingNumber
	//	min_warning	not set for AttributeMaxPendingNumber
	//	delta_t	not set for AttributeMaxPendingNumber
	//	delta_val	not set for AttributeMaxPendingNumber
	attributemaxpendingnumber_prop.set_event_abs_change("1");
	attributemaxpendingnumber_prop.set_archive_event_abs_change("1");
	
	attributemaxpendingnumber->set_default_properties(attributemaxpendingnumber_prop);
	//	Not Polled
	attributemaxpendingnumber->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	attributemaxpendingnumber->set_change_event(true, true);
	attributemaxpendingnumber->set_archive_event(true, true);
	att_list.push_back(attributemaxpendingnumber);

	//	Attribute : StatisticsResetTime
	StatisticsResetTimeAttrib	*statisticsresettime = new StatisticsResetTimeAttrib();
	Tango::UserDefaultAttrProp	statisticsresettime_prop;
	statisticsresettime_prop.set_description("Seconds elapsed since the last statistics reset");
	//	label	not set for StatisticsResetTime
	statisticsresettime_prop.set_unit("s");
	statisticsresettime_prop.set_standard_unit("1");
	statisticsresettime_prop.set_display_unit("s");
	//	format	not set for StatisticsResetTime
	//	max_value	not set for StatisticsResetTime
	//	min_value	not set for StatisticsResetTime
	//	max_alarm	not set for StatisticsResetTime
	//	min_alarm	not set for StatisticsResetTime
	//	max_warning	not set for StatisticsResetTime
	//	min_warning	not set for StatisticsResetTime
	//	delta_t	not set for StatisticsResetTime
	//	delta_val	not set for StatisticsResetTime
	
	statisticsresettime->set_default_properties(statisticsresettime_prop);
	//	Not Polled
	statisticsresettime->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(statisticsresettime);

	//	Attribute : AttributeList
	AttributeListAttrib	*attributelist = new AttributeListAttrib();
	Tango::UserDefaultAttrProp	attributelist_prop;
	attributelist_prop.set_description("Returns the configured attribute list");
	//	label	not set for AttributeList
	//	unit	not set for AttributeList
	//	standard_unit	not set for AttributeList
	//	display_unit	not set for AttributeList
	//	format	not set for AttributeList
	//	max_value	not set for AttributeList
	//	min_value	not set for AttributeList
	//	max_alarm	not set for AttributeList
	//	min_alarm	not set for AttributeList
	//	max_warning	not set for AttributeList
	//	min_warning	not set for AttributeList
	//	delta_t	not set for AttributeList
	//	delta_val	not set for AttributeList
	
	attributelist->set_default_properties(attributelist_prop);
	//	Not Polled
	attributelist->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	attributelist->set_change_event(true, false);
	attributelist->set_archive_event(true, false);
	att_list.push_back(attributelist);

	//	Attribute : AttributeOkList
	AttributeOkListAttrib	*attributeoklist = new AttributeOkListAttrib();
	Tango::UserDefaultAttrProp	attributeoklist_prop;
	attributeoklist_prop.set_description("Returns the attributes not on error list");
	//	label	not set for AttributeOkList
	//	unit	not set for AttributeOkList
	//	standard_unit	not set for AttributeOkList
	//	display_unit	not set for AttributeOkList
	//	format	not set for AttributeOkList
	//	max_value	not set for AttributeOkList
	//	min_value	not set for AttributeOkList
	//	max_alarm	not set for AttributeOkList
	//	min_alarm	not set for AttributeOkList
	//	max_warning	not set for AttributeOkList
	//	min_warning	not set for AttributeOkList
	//	delta_t	not set for AttributeOkList
	//	delta_val	not set for AttributeOkList
	
	attributeoklist->set_default_properties(attributeoklist_prop);
	//	Not Polled
	attributeoklist->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	attributeoklist->set_change_event(true, false);
	attributeoklist->set_archive_event(true, false);
	att_list.push_back(attributeoklist);

	//	Attribute : AttributeNokList
	AttributeNokListAttrib	*attributenoklist = new AttributeNokListAttrib();
	Tango::UserDefaultAttrProp	attributenoklist_prop;
	attributenoklist_prop.set_description("Returns the attributes on error list");
	//	label	not set for AttributeNokList
	//	unit	not set for AttributeNokList
	//	standard_unit	not set for AttributeNokList
	//	display_unit	not set for AttributeNokList
	//	format	not set for AttributeNokList
	//	max_value	not set for AttributeNokList
	//	min_value	not set for AttributeNokList
	//	max_alarm	not set for AttributeNokList
	//	min_alarm	not set for AttributeNokList
	//	max_warning	not set for AttributeNokList
	//	min_warning	not set for AttributeNokList
	//	delta_t	not set for AttributeNokList
	//	delta_val	not set for AttributeNokList
	
	attributenoklist->set_default_properties(attributenoklist_prop);
	//	Not Polled
	attributenoklist->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	attributenoklist->set_change_event(true, false);
	attributenoklist->set_archive_event(true, false);
	att_list.push_back(attributenoklist);

	//	Attribute : AttributePendingList
	AttributePendingListAttrib	*attributependinglist = new AttributePendingListAttrib();
	Tango::UserDefaultAttrProp	attributependinglist_prop;
	attributependinglist_prop.set_description("Returns the list attributes waiting to be archived");
	//	label	not set for AttributePendingList
	//	unit	not set for AttributePendingList
	//	standard_unit	not set for AttributePendingList
	//	display_unit	not set for AttributePendingList
	//	format	not set for AttributePendingList
	//	max_value	not set for AttributePendingList
	//	min_value	not set for AttributePendingList
	//	max_alarm	not set for AttributePendingList
	//	min_alarm	not set for AttributePendingList
	//	max_warning	not set for AttributePendingList
	//	min_warning	not set for AttributePendingList
	//	delta_t	not set for AttributePendingList
	//	delta_val	not set for AttributePendingList
	
	attributependinglist->set_default_properties(attributependinglist_prop);
	//	Not Polled
	attributependinglist->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	attributependinglist->set_change_event(true, false);
	attributependinglist->set_archive_event(true, false);
	att_list.push_back(attributependinglist);

	//	Attribute : AttributeRecordFreqList
	AttributeRecordFreqListAttrib	*attributerecordfreqlist = new AttributeRecordFreqListAttrib();
	Tango::UserDefaultAttrProp	attributerecordfreqlist_prop;
	attributerecordfreqlist_prop.set_description("Returns the list of record frequencies");
	//	label	not set for AttributeRecordFreqList
	//	unit	not set for AttributeRecordFreqList
	//	standard_unit	not set for AttributeRecordFreqList
	//	display_unit	not set for AttributeRecordFreqList
	//	format	not set for AttributeRecordFreqList
	//	max_value	not set for AttributeRecordFreqList
	//	min_value	not set for AttributeRecordFreqList
	//	max_alarm	not set for AttributeRecordFreqList
	//	min_alarm	not set for AttributeRecordFreqList
	//	max_warning	not set for AttributeRecordFreqList
	//	min_warning	not set for AttributeRecordFreqList
	//	delta_t	not set for AttributeRecordFreqList
	//	delta_val	not set for AttributeRecordFreqList
	attributerecordfreqlist_prop.set_event_abs_change("5");
	attributerecordfreqlist_prop.set_archive_event_abs_change("5");
	
	attributerecordfreqlist->set_default_properties(attributerecordfreqlist_prop);
	//	Not Polled
	attributerecordfreqlist->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	attributerecordfreqlist->set_change_event(true, true);
	attributerecordfreqlist->set_archive_event(true, true);
	att_list.push_back(attributerecordfreqlist);

	//	Attribute : AttributeFailureFreqList
	AttributeFailureFreqListAttrib	*attributefailurefreqlist = new AttributeFailureFreqListAttrib();
	Tango::UserDefaultAttrProp	attributefailurefreqlist_prop;
	attributefailurefreqlist_prop.set_description("Returns the list of failure frequencies");
	//	label	not set for AttributeFailureFreqList
	//	unit	not set for AttributeFailureFreqList
	//	standard_unit	not set for AttributeFailureFreqList
	//	display_unit	not set for AttributeFailureFreqList
	//	format	not set for AttributeFailureFreqList
	//	max_value	not set for AttributeFailureFreqList
	//	min_value	not set for AttributeFailureFreqList
	//	max_alarm	not set for AttributeFailureFreqList
	//	min_alarm	not set for AttributeFailureFreqList
	//	max_warning	not set for AttributeFailureFreqList
	//	min_warning	not set for AttributeFailureFreqList
	//	delta_t	not set for AttributeFailureFreqList
	//	delta_val	not set for AttributeFailureFreqList
	attributefailurefreqlist_prop.set_event_abs_change("1");
	attributefailurefreqlist_prop.set_archive_event_abs_change("1");
	
	attributefailurefreqlist->set_default_properties(attributefailurefreqlist_prop);
	//	Not Polled
	attributefailurefreqlist->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	attributefailurefreqlist->set_change_event(true, true);
	attributefailurefreqlist->set_archive_event(true, true);
	att_list.push_back(attributefailurefreqlist);

	//	Attribute : AttributeStartedList
	AttributeStartedListAttrib	*attributestartedlist = new AttributeStartedListAttrib();
	Tango::UserDefaultAttrProp	attributestartedlist_prop;
	attributestartedlist_prop.set_description("Returns the attributes started list");
	//	label	not set for AttributeStartedList
	//	unit	not set for AttributeStartedList
	//	standard_unit	not set for AttributeStartedList
	//	display_unit	not set for AttributeStartedList
	//	format	not set for AttributeStartedList
	//	max_value	not set for AttributeStartedList
	//	min_value	not set for AttributeStartedList
	//	max_alarm	not set for AttributeStartedList
	//	min_alarm	not set for AttributeStartedList
	//	max_warning	not set for AttributeStartedList
	//	min_warning	not set for AttributeStartedList
	//	delta_t	not set for AttributeStartedList
	//	delta_val	not set for AttributeStartedList
	
	attributestartedlist->set_default_properties(attributestartedlist_prop);
	//	Not Polled
	attributestartedlist->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	attributestartedlist->set_change_event(true, false);
	attributestartedlist->set_archive_event(true, false);
	att_list.push_back(attributestartedlist);

	//	Attribute : AttributeStoppedList
	AttributeStoppedListAttrib	*attributestoppedlist = new AttributeStoppedListAttrib();
	Tango::UserDefaultAttrProp	attributestoppedlist_prop;
	attributestoppedlist_prop.set_description("Returns the attributes stopped list");
	//	label	not set for AttributeStoppedList
	//	unit	not set for AttributeStoppedList
	//	standard_unit	not set for AttributeStoppedList
	//	display_unit	not set for AttributeStoppedList
	//	format	not set for AttributeStoppedList
	//	max_value	not set for AttributeStoppedList
	//	min_value	not set for AttributeStoppedList
	//	max_alarm	not set for AttributeStoppedList
	//	min_alarm	not set for AttributeStoppedList
	//	max_warning	not set for AttributeStoppedList
	//	min_warning	not set for AttributeStoppedList
	//	delta_t	not set for AttributeStoppedList
	//	delta_val	not set for AttributeStoppedList
	
	attributestoppedlist->set_default_properties(attributestoppedlist_prop);
	//	Not Polled
	attributestoppedlist->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	attributestoppedlist->set_change_event(true, false);
	attributestoppedlist->set_archive_event(true, false);
	att_list.push_back(attributestoppedlist);

	//	Attribute : AttributeEventNumberList
	AttributeEventNumberListAttrib	*attributeeventnumberlist = new AttributeEventNumberListAttrib();
	Tango::UserDefaultAttrProp	attributeeventnumberlist_prop;
	attributeeventnumberlist_prop.set_description("Returns the list of numbers of events received");
	//	label	not set for AttributeEventNumberList
	//	unit	not set for AttributeEventNumberList
	//	standard_unit	not set for AttributeEventNumberList
	//	display_unit	not set for AttributeEventNumberList
	//	format	not set for AttributeEventNumberList
	//	max_value	not set for AttributeEventNumberList
	//	min_value	not set for AttributeEventNumberList
	//	max_alarm	not set for AttributeEventNumberList
	//	min_alarm	not set for AttributeEventNumberList
	//	max_warning	not set for AttributeEventNumberList
	//	min_warning	not set for AttributeEventNumberList
	//	delta_t	not set for AttributeEventNumberList
	//	delta_val	not set for AttributeEventNumberList
	
	attributeeventnumberlist->set_default_properties(attributeeventnumberlist_prop);
	//	Not Polled
	attributeeventnumberlist->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	attributeeventnumberlist->set_change_event(true, true);
	attributeeventnumberlist->set_archive_event(true, true);
	att_list.push_back(attributeeventnumberlist);

	//	Attribute : AttributeErrorList
	AttributeErrorListAttrib	*attributeerrorlist = new AttributeErrorListAttrib();
	Tango::UserDefaultAttrProp	attributeerrorlist_prop;
	attributeerrorlist_prop.set_description("Returns the list of attribute errors");
	//	label	not set for AttributeErrorList
	//	unit	not set for AttributeErrorList
	//	standard_unit	not set for AttributeErrorList
	//	display_unit	not set for AttributeErrorList
	//	format	not set for AttributeErrorList
	//	max_value	not set for AttributeErrorList
	//	min_value	not set for AttributeErrorList
	//	max_alarm	not set for AttributeErrorList
	//	min_alarm	not set for AttributeErrorList
	//	max_warning	not set for AttributeErrorList
	//	min_warning	not set for AttributeErrorList
	//	delta_t	not set for AttributeErrorList
	//	delta_val	not set for AttributeErrorList
	
	attributeerrorlist->set_default_properties(attributeerrorlist_prop);
	//	Not Polled
	attributeerrorlist->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	attributeerrorlist->set_change_event(true, false);
	attributeerrorlist->set_archive_event(true, false);
	att_list.push_back(attributeerrorlist);

	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());
	/*----- PROTECTED REGION ID(HdbEventSubscriberClass::attribute_factory_after) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriberClass::attribute_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : HdbEventSubscriberClass::command_factory()
 *	Description : Create the command object(s)
 *                and store them in the command list
 */
//--------------------------------------------------------
void HdbEventSubscriberClass::command_factory()
{
	/*----- PROTECTED REGION ID(HdbEventSubscriberClass::command_factory_before) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriberClass::command_factory_before


	//	Command AttributeAdd
	AttributeAddClass	*pAttributeAddCmd =
		new AttributeAddClass("AttributeAdd",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Attribute name",
			"",
			Tango::OPERATOR);
	command_list.push_back(pAttributeAddCmd);

	//	Command AttributeRemove
	AttributeRemoveClass	*pAttributeRemoveCmd =
		new AttributeRemoveClass("AttributeRemove",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Attribute name",
			"",
			Tango::OPERATOR);
	command_list.push_back(pAttributeRemoveCmd);

	//	Command AttributeStatus
	AttributeStatusClass	*pAttributeStatusCmd =
		new AttributeStatusClass("AttributeStatus",
			Tango::DEV_STRING, Tango::DEV_STRING,
			"The attribute name",
			"The attribute status.",
			Tango::OPERATOR);
	command_list.push_back(pAttributeStatusCmd);

	//	Command Start
	StartClass	*pStartCmd =
		new StartClass("Start",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pStartCmd);

	//	Command Stop
	StopClass	*pStopCmd =
		new StopClass("Stop",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pStopCmd);

	//	Command AttributeStart
	AttributeStartClass	*pAttributeStartCmd =
		new AttributeStartClass("AttributeStart",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Attribute name",
			"",
			Tango::OPERATOR);
	command_list.push_back(pAttributeStartCmd);

	//	Command AttributeStop
	AttributeStopClass	*pAttributeStopCmd =
		new AttributeStopClass("AttributeStop",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Attribute name",
			"",
			Tango::OPERATOR);
	command_list.push_back(pAttributeStopCmd);

	//	Command ResetStatistics
	ResetStatisticsClass	*pResetStatisticsCmd =
		new ResetStatisticsClass("ResetStatistics",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pResetStatisticsCmd);

	/*----- PROTECTED REGION ID(HdbEventSubscriberClass::command_factory_after) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriberClass::command_factory_after
}

//===================================================================
//	Dynamic attributes related methods
//===================================================================

//--------------------------------------------------------
/**
 * method : 		HdbEventSubscriberClass::create_static_attribute_list
 * description : 	Create the a list of static attributes
 *
 * @param	att_list	the ceated attribute list 
 */
//--------------------------------------------------------
void HdbEventSubscriberClass::create_static_attribute_list(vector<Tango::Attr *> &att_list)
{
	for (unsigned long i=0 ; i<att_list.size() ; i++)
	{
		string att_name(att_list[i]->get_name());
		transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
		defaultAttList.push_back(att_name);
	}

	cout2 << defaultAttList.size() << " attributes in default list" << endl;

	/*----- PROTECTED REGION ID(HdbEventSubscriberClass::create_static_att_list) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriberClass::create_static_att_list
}


//--------------------------------------------------------
/**
 * method : 		HdbEventSubscriberClass::erase_dynamic_attributes
 * description : 	delete the dynamic attributes if any.
 *
 * @param	devlist_ptr	the device list pointer
 * @param	list of all attributes
 */
//--------------------------------------------------------
void HdbEventSubscriberClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)
{
	Tango::Util *tg = Tango::Util::instance();

	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{	
		Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((string)(*devlist_ptr)[i]).c_str());
		HdbEventSubscriber *dev = static_cast<HdbEventSubscriber *> (dev_impl);
		
		vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
		vector<Tango::Attribute *>::iterator ite_att;
		for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
		{
			string att_name((*ite_att)->get_name_lower());
			if ((att_name == "state") || (att_name == "status"))
				continue;
			vector<string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
			if (ite_str == defaultAttList.end())
			{
				cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << endl;
				Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
				dev->remove_attribute(att_list[att.get_attr_idx()], true, false);
				--ite_att;
			}
		}
	}
	/*----- PROTECTED REGION ID(HdbEventSubscriberClass::erase_dynamic_attributes) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriberClass::erase_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : HdbEventSubscriberClass::get_attr_by_name()
 *	Description : returns Tango::Attr * object found by name
 */
//--------------------------------------------------------
Tango::Attr *HdbEventSubscriberClass::get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname)
{
	vector<Tango::Attr *>::iterator it;
	for (it=att_list.begin() ; it<att_list.end() ; it++)
		if ((*it)->get_name()==attname)
			return (*it);
	//	Attr does not exist
	return NULL;
}


/*----- PROTECTED REGION ID(HdbEventSubscriberClass::Additional Methods) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	HdbEventSubscriberClass::Additional Methods
} //	namespace
