# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hdbextractor', [dirname(__file__)])
        except ImportError:
            import _hdbextractor
            return _hdbextractor
        if fp is not None:
            try:
                _mod = imp.load_module('_hdbextractor', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _hdbextractor = swig_import_helper()
    del swig_import_helper
else:
    import _hdbextractor
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class DataSieverProgressListener(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSieverProgressListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataSieverProgressListener, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hdbextractor.new_DataSieverProgressListener()
        try:
            self.this.append(this)
        except:
            self.this = this

    def onFillProgressUpdate(self, step, total, elapsed, estimated_remaining):
        return _hdbextractor.DataSieverProgressListener_onFillProgressUpdate(self, step, total, elapsed, estimated_remaining)
    __swig_destroy__ = _hdbextractor.delete_DataSieverProgressListener
    __del__ = lambda self: None
DataSieverProgressListener_swigregister = _hdbextractor.DataSieverProgressListener_swigregister
DataSieverProgressListener_swigregister(DataSieverProgressListener)

class HdbXSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HdbXSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HdbXSettings, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hdbextractor.new_HdbXSettings()
        try:
            self.this.append(this)
        except:
            self.this = this

    def loadFromFile(self, filename):
        return _hdbextractor.HdbXSettings_loadFromFile(self, filename)

    def set(self, *args):
        return _hdbextractor.HdbXSettings_set(self, *args)

    def hasKey(self, key):
        return _hdbextractor.HdbXSettings_hasKey(self, key)

    def getInt(self, key, ok):
        return _hdbextractor.HdbXSettings_getInt(self, key, ok)

    def get(self, key):
        return _hdbextractor.HdbXSettings_get(self, key)

    def getBool(self, key):
        return _hdbextractor.HdbXSettings_getBool(self, key)

    def getDouble(self, key, ok):
        return _hdbextractor.HdbXSettings_getDouble(self, key, ok)
    __swig_destroy__ = _hdbextractor.delete_HdbXSettings
    __del__ = lambda self: None
HdbXSettings_swigregister = _hdbextractor.HdbXSettings_swigregister
HdbXSettings_swigregister(HdbXSettings)

class Result(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Result, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hdbextractor.delete_Result
    __del__ = lambda self: None

    def close(self):
        return _hdbextractor.Result_close(self)

    def getCurrentRow(self):
        return _hdbextractor.Result_getCurrentRow(self)

    def getRowCount(self):
        return _hdbextractor.Result_getRowCount(self)

    def next(self):
        return _hdbextractor.Result_next(self)
Result_swigregister = _hdbextractor.Result_swigregister
Result_swigregister(Result)

class ResultListener(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResultListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResultListener, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setUpdateProgressPercent(self, percent):
        return _hdbextractor.ResultListener_setUpdateProgressPercent(self, percent)

    def onProgressUpdate(self, source, percent):
        return _hdbextractor.ResultListener_onProgressUpdate(self, source, percent)

    def onSourceExtracted(self, source, totalRows, elapsed):
        return _hdbextractor.ResultListener_onSourceExtracted(self, source, totalRows, elapsed)

    def onFinished(self, totalRows, elapsed):
        return _hdbextractor.ResultListener_onFinished(self, totalRows, elapsed)
    __swig_destroy__ = _hdbextractor.delete_ResultListener
    __del__ = lambda self: None
ResultListener_swigregister = _hdbextractor.ResultListener_swigregister
ResultListener_swigregister(ResultListener)

class XVariantDataInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XVariantDataInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XVariantDataInfo, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _hdbextractor.delete_XVariantDataInfo
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _hdbextractor.new_XVariantDataInfo(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setSource(self, src):
        return _hdbextractor.XVariantDataInfo_setSource(self, src)

    def set(self, *args):
        return _hdbextractor.XVariantDataInfo_set(self, *args)
    __swig_setmethods__["format"] = _hdbextractor.XVariantDataInfo_format_set
    __swig_getmethods__["format"] = _hdbextractor.XVariantDataInfo_format_get
    if _newclass:
        format = _swig_property(_hdbextractor.XVariantDataInfo_format_get, _hdbextractor.XVariantDataInfo_format_set)
    __swig_setmethods__["type"] = _hdbextractor.XVariantDataInfo_type_set
    __swig_getmethods__["type"] = _hdbextractor.XVariantDataInfo_type_get
    if _newclass:
        type = _swig_property(_hdbextractor.XVariantDataInfo_type_get, _hdbextractor.XVariantDataInfo_type_set)
    __swig_setmethods__["writable"] = _hdbextractor.XVariantDataInfo_writable_set
    __swig_getmethods__["writable"] = _hdbextractor.XVariantDataInfo_writable_get
    if _newclass:
        writable = _swig_property(_hdbextractor.XVariantDataInfo_writable_get, _hdbextractor.XVariantDataInfo_writable_set)
    __swig_setmethods__["source"] = _hdbextractor.XVariantDataInfo_source_set
    __swig_getmethods__["source"] = _hdbextractor.XVariantDataInfo_source_get
    if _newclass:
        source = _swig_property(_hdbextractor.XVariantDataInfo_source_get, _hdbextractor.XVariantDataInfo_source_set)
XVariantDataInfo_swigregister = _hdbextractor.XVariantDataInfo_swigregister
XVariantDataInfo_swigregister(XVariantDataInfo)

class XVariantList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XVariantList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XVariantList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hdbextractor.new_XVariantList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _hdbextractor.delete_XVariantList
    __del__ = lambda self: None

    def get(self, i):
        return _hdbextractor.XVariantList_get(self, i)

    def add(self, xv):
        return _hdbextractor.XVariantList_add(self, xv)

    def isEmpty(self):
        return _hdbextractor.XVariantList_isEmpty(self)

    def size(self):
        return _hdbextractor.XVariantList_size(self)
XVariantList_swigregister = _hdbextractor.XVariantList_swigregister
XVariantList_swigregister(XVariantList)

class DataSiever(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSiever, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataSiever, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hdbextractor.new_DataSiever()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _hdbextractor.delete_DataSiever
    __del__ = lambda self: None

    def divide(self, rawdata):
        return _hdbextractor.DataSiever_divide(self, rawdata)

    def fill(self):
        return _hdbextractor.DataSiever_fill(self)

    def clear(self):
        return _hdbextractor.DataSiever_clear(self)

    def getElapsedTimeMicrosecs(self):
        return _hdbextractor.DataSiever_getElapsedTimeMicrosecs(self)

    def getSize(self):
        return _hdbextractor.DataSiever_getSize(self)

    def getSources(self):
        return _hdbextractor.DataSiever_getSources(self)

    def getDataAsList(self, source):
        return _hdbextractor.DataSiever_getDataAsList(self, source)

    def getDataRef(self):
        return _hdbextractor.DataSiever_getDataRef(self)

    def getData(self, *args):
        return _hdbextractor.DataSiever_getData(self, *args)

    def contains(self, source):
        return _hdbextractor.DataSiever_contains(self, source)

    def installDataSieverProgressListener(self, dspl):
        return _hdbextractor.DataSiever_installDataSieverProgressListener(self, dspl)

    def removeDataSieverProgressListener(self, dspl):
        return _hdbextractor.DataSiever_removeDataSieverProgressListener(self, dspl)
DataSiever_swigregister = _hdbextractor.DataSiever_swigregister
DataSiever_swigregister(DataSiever)

class DateTimeUtils(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DateTimeUtils, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DateTimeUtils, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hdbextractor.new_DateTimeUtils()
        try:
            self.this.append(this)
        except:
            self.this = this

    def toTime_t(self, timestamp_str):
        return _hdbextractor.DateTimeUtils_toTime_t(self, timestamp_str)

    def toTimeval(self, timestamp_str):
        return _hdbextractor.DateTimeUtils_toTimeval(self, timestamp_str)

    def toDouble(self, timestamp_str):
        return _hdbextractor.DateTimeUtils_toDouble(self, timestamp_str)

    def toString(self, *args):
        return _hdbextractor.DateTimeUtils_toString(self, *args)
    __swig_destroy__ = _hdbextractor.delete_DateTimeUtils
    __del__ = lambda self: None
DateTimeUtils_swigregister = _hdbextractor.DateTimeUtils_swigregister
DateTimeUtils_swigregister(DateTimeUtils)

class HdbExtractorListener(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HdbExtractorListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HdbExtractorListener, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == HdbExtractorListener:
            _self = None
        else:
            _self = self
        this = _hdbextractor.new_HdbExtractorListener(_self, )
        try:
            self.this.append(this)
        except:
            self.this = this

    def onSourceProgressUpdate(self, name, percent):
        return _hdbextractor.HdbExtractorListener_onSourceProgressUpdate(self, name, percent)

    def onExtractionFinished(self, totalRows, elapsed):
        return _hdbextractor.HdbExtractorListener_onExtractionFinished(self, totalRows, elapsed)

    def onSourceExtractionFinished(self, name, totalRows, elapsed):
        return _hdbextractor.HdbExtractorListener_onSourceExtractionFinished(self, name, totalRows, elapsed)
    __swig_destroy__ = _hdbextractor.delete_HdbExtractorListener
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _hdbextractor.disown_HdbExtractorListener(self)
        return weakref_proxy(self)
HdbExtractorListener_swigregister = _hdbextractor.HdbExtractorListener_swigregister
HdbExtractorListener_swigregister(HdbExtractorListener)

class Connection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Connection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Connection, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hdbextractor.delete_Connection
    __del__ = lambda self: None

    def connect(self, host, db, user, passwd, port):
        return _hdbextractor.Connection_connect(self, host, db, user, passwd, port)

    def getError(self):
        return _hdbextractor.Connection_getError(self)

    def isConnected(self):
        return _hdbextractor.Connection_isConnected(self)

    def close(self):
        return _hdbextractor.Connection_close(self)

    def query(self, arg2):
        return _hdbextractor.Connection_query(self, arg2)
Connection_swigregister = _hdbextractor.Connection_swigregister
Connection_swigregister(Connection)

class MySqlConnection(Connection):
    __swig_setmethods__ = {}
    for _s in [Connection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MySqlConnection, name, value)
    __swig_getmethods__ = {}
    for _s in [Connection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MySqlConnection, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hdbextractor.new_MySqlConnection()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _hdbextractor.delete_MySqlConnection
    __del__ = lambda self: None

    def connect(self, host, db, user, passwd, port=3306):
        return _hdbextractor.MySqlConnection_connect(self, host, db, user, passwd, port)

    def getError(self):
        return _hdbextractor.MySqlConnection_getError(self)

    def isConnected(self):
        return _hdbextractor.MySqlConnection_isConnected(self)

    def close(self):
        return _hdbextractor.MySqlConnection_close(self)

    def getAffectedRows(self):
        return _hdbextractor.MySqlConnection_getAffectedRows(self)

    def query(self, arg2):
        return _hdbextractor.MySqlConnection_query(self, arg2)
MySqlConnection_swigregister = _hdbextractor.MySqlConnection_swigregister
MySqlConnection_swigregister(MySqlConnection)


_hdbextractor.MAXERRORLEN_swigconstant(_hdbextractor)
MAXERRORLEN = _hdbextractor.MAXERRORLEN
class ConfigurationParser(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigurationParser, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigurationParser, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hdbextractor.new_ConfigurationParser()
        try:
            self.this.append(this)
        except:
            self.this = this

    def read(self, filepath, params):
        return _hdbextractor.ConfigurationParser_read(self, filepath, params)

    def getError(self):
        return _hdbextractor.ConfigurationParser_getError(self)
    __swig_destroy__ = _hdbextractor.delete_ConfigurationParser
    __del__ = lambda self: None
ConfigurationParser_swigregister = _hdbextractor.ConfigurationParser_swigregister
ConfigurationParser_swigregister(ConfigurationParser)


_hdbextractor.MAXTIMESTAMPLEN_swigconstant(_hdbextractor)
MAXTIMESTAMPLEN = _hdbextractor.MAXTIMESTAMPLEN
class TimeInterval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeInterval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeInterval, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hdbextractor.new_TimeInterval(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def __eq__(self, other):
        return _hdbextractor.TimeInterval___eq__(self, other)

    def __ne__(self, other):
        return _hdbextractor.TimeInterval___ne__(self, other)

    def intersects(self, other):
        return _hdbextractor.TimeInterval_intersects(self, other)

    def contains(self, other):
        return _hdbextractor.TimeInterval_contains(self, other)

    def start_time_t(self):
        return _hdbextractor.TimeInterval_start_time_t(self)

    def stop_time_t(self):
        return _hdbextractor.TimeInterval_stop_time_t(self)

    def start_timeval(self):
        return _hdbextractor.TimeInterval_start_timeval(self)

    def stop_timeval(self):
        return _hdbextractor.TimeInterval_stop_timeval(self)

    def start(self):
        return _hdbextractor.TimeInterval_start(self)

    def stop(self):
        return _hdbextractor.TimeInterval_stop(self)
    __swig_destroy__ = _hdbextractor.delete_TimeInterval
    __del__ = lambda self: None
TimeInterval_swigregister = _hdbextractor.TimeInterval_swigregister
TimeInterval_swigregister(TimeInterval)


_hdbextractor.TIMESTAMPLEN_swigconstant(_hdbextractor)
TIMESTAMPLEN = _hdbextractor.TIMESTAMPLEN

_hdbextractor.SRCLEN_swigconstant(_hdbextractor)
SRCLEN = _hdbextractor.SRCLEN
class XVariant(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XVariant, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XVariant, name)
    __repr__ = _swig_repr
    FormatInvalid = _hdbextractor.XVariant_FormatInvalid
    Scalar = _hdbextractor.XVariant_Scalar
    Vector = _hdbextractor.XVariant_Vector
    Matrix = _hdbextractor.XVariant_Matrix
    TypeInvalid = _hdbextractor.XVariant_TypeInvalid
    Int = _hdbextractor.XVariant_Int
    UInt = _hdbextractor.XVariant_UInt
    Double = _hdbextractor.XVariant_Double
    Boolean = _hdbextractor.XVariant_Boolean
    String = _hdbextractor.XVariant_String
    WritableInvalid = _hdbextractor.XVariant_WritableInvalid
    RO = _hdbextractor.XVariant_RO
    WO = _hdbextractor.XVariant_WO
    RWW = _hdbextractor.XVariant_RWW
    RW = _hdbextractor.XVariant_RW

    def __init__(self, *args):
        this = _hdbextractor.new_XVariant(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _hdbextractor.delete_XVariant
    __del__ = lambda self: None

    def getSource(self):
        return _hdbextractor.XVariant_getSource(self)

    def getFormat(self):
        return _hdbextractor.XVariant_getFormat(self)

    def getType(self):
        return _hdbextractor.XVariant_getType(self)

    def getWritable(self):
        return _hdbextractor.XVariant_getWritable(self)

    def getSize(self):
        return _hdbextractor.XVariant_getSize(self)

    def getQuality(self):
        return _hdbextractor.XVariant_getQuality(self)

    def toDoubleVector(self, read=True):
        return _hdbextractor.XVariant_toDoubleVector(self, read)

    def toLongIntVector(self, read=True):
        return _hdbextractor.XVariant_toLongIntVector(self, read)

    def toULongIntVector(self, read=True):
        return _hdbextractor.XVariant_toULongIntVector(self, read)

    def toBoolVector(self, read=True):
        return _hdbextractor.XVariant_toBoolVector(self, read)

    def toDouble(self, read=True, ok=None):
        return _hdbextractor.XVariant_toDouble(self, read, ok)

    def isValid(self):
        return _hdbextractor.XVariant_isValid(self)

    def isNull(self):
        return _hdbextractor.XVariant_isNull(self)

    def isWNull(self):
        return _hdbextractor.XVariant_isWNull(self)

    def toULongInt(self, read=True, ok=None):
        return _hdbextractor.XVariant_toULongInt(self, read, ok)

    def toLongInt(self, read=True, ok=None):
        return _hdbextractor.XVariant_toLongInt(self, read, ok)

    def toBool(self, read=True, ok=None):
        return _hdbextractor.XVariant_toBool(self, read, ok)

    def getTimestamp(self):
        return _hdbextractor.XVariant_getTimestamp(self)

    def getError(self):
        return _hdbextractor.XVariant_getError(self)

    def setTimestamp(self, *args):
        return _hdbextractor.XVariant_setTimestamp(self, *args)

    def setQuality(self, quality):
        return _hdbextractor.XVariant_setQuality(self, quality)

    def setError(self, error):
        return _hdbextractor.XVariant_setError(self, error)

    def getTime_tTimestamp(self):
        return _hdbextractor.XVariant_getTime_tTimestamp(self)

    def getTimevalTimestamp(self):
        return _hdbextractor.XVariant_getTimevalTimestamp(self)

    def add(self, *args):
        return _hdbextractor.XVariant_add(self, *args)

    def toString(self, read=True, ok=None):
        return _hdbextractor.XVariant_toString(self, read, ok)

    def toStringVector(self):
        return _hdbextractor.XVariant_toStringVector(self)

    def toDoubleP(self, read=True):
        return _hdbextractor.XVariant_toDoubleP(self, read)

    def toLongIntP(self, read=True):
        return _hdbextractor.XVariant_toLongIntP(self, read)

    def toULongIntP(self, read=True):
        return _hdbextractor.XVariant_toULongIntP(self, read)

    def toBoolP(self, read=True):
        return _hdbextractor.XVariant_toBoolP(self, read)

    def toCharP(self, read=True):
        return _hdbextractor.XVariant_toCharP(self, read)

    def convertToString(self, read=True, ok=None):
        return _hdbextractor.XVariant_convertToString(self, read, ok)

    def getNullValuesCount(self):
        return _hdbextractor.XVariant_getNullValuesCount(self)

    def getNullValueIndexes(self):
        return _hdbextractor.XVariant_getNullValueIndexes(self)

    def getNullWValuesCount(self):
        return _hdbextractor.XVariant_getNullWValuesCount(self)

    def getNullWValueIndexes(self):
        return _hdbextractor.XVariant_getNullWValueIndexes(self)
XVariant_swigregister = _hdbextractor.XVariant_swigregister
XVariant_swigregister(XVariant)

class XVariantPrinter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XVariantPrinter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XVariantPrinter, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hdbextractor.new_XVariantPrinter()
        try:
            self.this.append(this)
        except:
            self.this = this

    def _print(self, xv, maxVectorElements=-1):
        return _hdbextractor.XVariantPrinter__print(self, xv, maxVectorElements)

    def printValueList(self, valuelist, maxVectorElements=-1):
        return _hdbextractor.XVariantPrinter_printValueList(self, valuelist, maxVectorElements)
    __swig_destroy__ = _hdbextractor.delete_XVariantPrinter
    __del__ = lambda self: None
XVariantPrinter_swigregister = _hdbextractor.XVariantPrinter_swigregister
XVariantPrinter_swigregister(XVariantPrinter)

class Hdbextractor(ResultListener):
    __swig_setmethods__ = {}
    for _s in [ResultListener]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hdbextractor, name, value)
    __swig_getmethods__ = {}
    for _s in [ResultListener]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Hdbextractor, name)
    __repr__ = _swig_repr
    DBUNDEFINED = _hdbextractor.Hdbextractor_DBUNDEFINED
    HDBMYSQL = _hdbextractor.Hdbextractor_HDBMYSQL
    HDBPOSTGRES = _hdbextractor.Hdbextractor_HDBPOSTGRES
    HDBPPMYSQL = _hdbextractor.Hdbextractor_HDBPPMYSQL
    HDBPPINFLUX = _hdbextractor.Hdbextractor_HDBPPINFLUX
    HDBPPPOSTGRES = _hdbextractor.Hdbextractor_HDBPPPOSTGRES

    def __init__(self, hdbxlistener):
        this = _hdbextractor.new_Hdbextractor(hdbxlistener)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _hdbextractor.delete_Hdbextractor
    __del__ = lambda self: None

    def dbType(self):
        return _hdbextractor.Hdbextractor_dbType(self)

    def setUpdateProgressPercent(self, percent):
        return _hdbextractor.Hdbextractor_setUpdateProgressPercent(self, percent)

    def updateProgressPercent(self):
        return _hdbextractor.Hdbextractor_updateProgressPercent(self)

    def connect(self, dbType, host, db, user, passwd, port=3306):
        return _hdbextractor.Hdbextractor_connect(self, dbType, host, db, user, passwd, port)

    def disconnect(self):
        return _hdbextractor.Hdbextractor_disconnect(self)

    def getData(self, *args):
        return _hdbextractor.Hdbextractor_getData(self, *args)

    def getSourcesList(self, result):
        return _hdbextractor.Hdbextractor_getSourcesList(self, result)

    def findErrors(self, source, time_interval):
        return _hdbextractor.Hdbextractor_findErrors(self, source, time_interval)

    def setHdbXSettings(self, qc):
        return _hdbextractor.Hdbextractor_setHdbXSettings(self, qc)

    def get(self, variantlist):
        return _hdbextractor.Hdbextractor_get(self, variantlist)

    def isConnected(self):
        return _hdbextractor.Hdbextractor_isConnected(self)

    def setDbType(self, dbt):
        return _hdbextractor.Hdbextractor_setDbType(self, dbt)

    def onProgressUpdate(self, name, percent):
        return _hdbextractor.Hdbextractor_onProgressUpdate(self, name, percent)

    def onFinished(self, totalRows, elapsed):
        return _hdbextractor.Hdbextractor_onFinished(self, totalRows, elapsed)

    def onSourceExtracted(self, source, totalRows, elapsed):
        return _hdbextractor.Hdbextractor_onSourceExtracted(self, source, totalRows, elapsed)

    def getErrorMessage(self):
        return _hdbextractor.Hdbextractor_getErrorMessage(self)

    def hasError(self):
        return _hdbextractor.Hdbextractor_hasError(self)

    def getHdbXSettings(self):
        return _hdbextractor.Hdbextractor_getHdbXSettings(self)

    def cancelExtraction(self):
        return _hdbextractor.Hdbextractor_cancelExtraction(self)

    def extractionIsCancelled(self):
        return _hdbextractor.Hdbextractor_extractionIsCancelled(self)
Hdbextractor_swigregister = _hdbextractor.Hdbextractor_swigregister
Hdbextractor_swigregister(Hdbextractor)

# This file is compatible with both classic and new-style classes.


